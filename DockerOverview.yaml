name: Docker Overview
timeSelector: {}
sharedTimeInterval:
  enabled: false
  isLive: false
  start: 1d
filters:
  JRXbbvVgci8yx3nDQ9Al4L7LVH3VFhDL:
    queryPrefix: container.name=*
    title: Container Name
widgets:
  f721e4bd-8c17-4a57-a44c-badb05e30900:
    x: 0
    y: 3
    height: 4
    queryString: docker.memory.stats.rss:=(docker.memory.stats.rss/1024)|round(docker.memory.stats.rss)|timechart("container.name",
      function=[avg(docker.memory.stats.rss, as=mem_rss_kbytes)])|unit:convert(mem_rss_kbytes,
      from=b, to=mb)
    start: 5m
    width: 6
    options:
      series:
        humio:
          color: '#00ccff'
      xAxisTitle: Containers
      yAxisScale: linear
      show-utc: false
      imputation: lerp
      yAxisTitle: Total Memory used
      stacking: none
    visualization: time-chart
    title: Top 10 Containers by Avg Resident Memory Consumption
    type: query
  cd0d7cbd-f9e8-4912-aa81-dfa82e7215fd:
    x: 6
    y: 0
    height: 3
    queryString: count(docker.info.containers.stopped, distinct=true)
    start: 5m
    width: 3
    options:
      yAxisTitle: Stopped
    visualization: simple-gauge
    title: Containers
    type: query
  9b7b0239-76a5-4994-bb6e-897ae50c3f89:
    x: 9
    y: 0
    height: 3
    queryString: |-
      groupBy("container.image.name")
      |count(container.image.name)
    start: 1m
    width: 3
    options:
      cly: 5
      cuy: 20
      yAxisTitle: Running
      col: true
      cur: 30
      clr: 0
    visualization: simple-gauge
    title: Containers
    type: query
  548a9a93-152a-44ff-819c-0239f18ef0c9:
    x: 0
    y: 15
    height: 4
    queryString: |-
      total_bytes:=(docker.network.in.bytes+docker.network.out.bytes)
      |timechart(container.name, function=max(total_bytes), limit=10)| unit:convert(_max, from=b, to=mb)|round(_max)|sort(_max, order=desc)
    start: 1h
    width: 8
    options:
      imputation: none
      stacking: none
      yAxisScale: linear
      series: {}
    visualization: time-chart
    title: Top 10 Containers by Traffic Sent and Received (MB)
    type: query
  3c597ac5-dedc-47e2-bdd0-c76b0dac6a42:
    x: 0
    y: 0
    height: 3
    queryString: count(docker.image.tags[0],distinct=true)
    start: 24h
    width: 3
    options:
      cly: 1
      cuy: 2
      yAxisTitle: Total Images
      col: false
      cur: 5
      clr: 1
    visualization: simple-gauge
    title: Docker
    type: query
  5f45f113-8fc3-43ba-a923-2cac4ab73908:
    x: 8
    y: 15
    height: 4
    queryString: |-
      total_bytes:=(docker.network.in.errors+docker.network.inbound.errors+docker.network.out.errors+docker.network.outbound.errors)
      |timeChart(function=max(total_bytes))
    start: 1h
    width: 4
    options:
      legendPosition: bottom
      series: {}
      interpolation: monotone
      lastBucketBehavior: include
      stacking: none
      yAxisScale: linear
      plotType: line
      imputation: none
    visualization: time-chart
    title: Total Network Error Count Outlier
    type: query
  2bb40e27-d9cb-4cd9-8e46-83dd6267ab63:
    x: 4
    y: 19
    height: 4
    queryString: |-
      groupby(["container.name","docker.container.ip_addresses[0]"],function=count(docker.container.ip_addresses[0],distinct=true))
      |drop(_count)
      |rename("container.name",as="container name")
      |rename("docker.container.ip_addresses[0]",as="container ip address")
    visualization: table-view
    start: 1h
    width: 4
    title: Container ip addresses
    type: query
  6f4fe096-9d3d-4767-a7f3-45c4d35ee04d:
    x: 3
    y: 0
    height: 3
    queryString: |
      count(docker.info.containers.paused,distinct=true)
    start: 5m
    width: 3
    options:
      cly: 1
      cuy: 2
      yAxisTitle: Paused
      col: true
      cur: 4
      clr: 1
    visualization: simple-gauge
    title: Containers
    type: query
  e2b835ba-4af1-42a4-953d-b77acde18de3:
    x: 6
    y: 3
    height: 4
    queryString: |-
      docker.cpu.total.pct:=(docker.cpu.total.pct*100)
      |docker.memory.usage.pct:=(docker.memory.usage.pct*100)
      |round(docker.cpu.total.pct)
      |round(docker.memory.usage.pct)
      |timechart(container.name, function=[avg(docker.cpu.total.pct, as=cpu_usage)])
    start: 1h
    width: 6
    options:
      yAxisScale: linear
      show-utc: false
      mn: 0
      yAxisUnit: ''
      series:
        humio:
          color: '#00eeff'
      mx: 100
      xAxisTitle: Containers
      yAxisTitle: CPU Usage  %
      stacking: none
    visualization: time-chart
    title: Top 10 Containers by CPU Consumption (%)
    type: query
  24dc073b-e199-47a6-b86b-2b0d688616e7:
    x: 8
    y: 19
    height: 4
    queryString: groupby(docker.event.action)
    start: 4h
    width: 4
    options:
      innerRadius: 0
    visualization: pie-chart
    title: Container Actions
    type: query
  8b296521-bf8f-4373-ab38-512ee77617bc:
    x: 0
    y: 7
    height: 4
    queryString: |-
      docker.cpu.total.pct:=(docker.cpu.total.pct*100)
      |docker.memory.usage.pct:=(docker.memory.usage.pct*100)
      |round(docker.cpu.total.pct)
      |round(docker.memory.usage.pct)
      |timechart(container.name, function=[avg(docker.cpu.total.pct, as=cpu_usage), avg(docker.memory.usage.pct, as=mem_usage)])
    start: 1m
    width: 12
    options:
      series: {}
      interpolation: linear
      mx: 100
      stacking: none
      yAxisScale: linear
      plotType: line
      imputation: lerp
    visualization: time-chart
    title: CPU and Memory Usage %
    type: query
  23e54762-b8d9-479e-92cf-49826f840957:
    x: 0
    y: 19
    height: 4
    queryString: |-
      docker.container.status = "U*"|
      groupby(["container.name","docker.container.status"])
      |_count>1
      |drop(_count)
      |rename("container.name",as="container name")
      |rename("docker.container.status",as="docker status")
    visualization: table-view
    start: 30s
    width: 4
    title: Container Uptime
    type: query
  b7ebdef7-6e91-4261-b71a-943b40ce4761:
    x: 0
    y: 11
    height: 4
    queryString: |
      round(docker.diskio.read.bytes)
      |round(docker.diskio.write.bytes)
      |timechart(container.name, function=[avg(docker.diskio.read.bytes, as=diskread), avg(docker.diskio.write.bytes, as=diskwrite)])
    start: 1h
    width: 12
    options:
      series:
        humio, diskread:
          color: '#09f14e'
        humio, diskwrite:
          color: '#ff8800'
      interpolation: linear
      stacking: none
      yAxisScale: linear
      plotType: area
      imputation: lerp
    visualization: time-chart
    title: Container Disk Block IO Read/Write Usage
    type: query
$schema: https://schemas.humio.com/dashboard/v0.1.0
